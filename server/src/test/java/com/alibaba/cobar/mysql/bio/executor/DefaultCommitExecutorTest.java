package com.alibaba.cobar.mysql.bio.executor;

import com.alibaba.cobar.mysql.bio.executor.DefaultCommitExecutor;
import com.diffblue.deeptestutils.Reflector;
import org.apache.log4j.Hierarchy;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.RootLogger;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

import java.lang.reflect.InvocationTargetException;
import java.util.Hashtable;



public class DefaultCommitExecutorTest {

  @Rule
  public final Timeout globalTimeout = new Timeout(10000);

  // Test written by Diffblue Cover
  @Test
  public void constructorOutputNotNull999b94b86ba82dd4914() {

    // Act, creating object to test constructor
    final DefaultCommitExecutor actual = new DefaultCommitExecutor();

    // Assert result
    Assert.assertNotNull(actual);

  }

  // Test written by Diffblue Cover
  @Test
  public void getErrorMessageOutputNotNull999340e088591e73cbd() {

    // Arrange
    final DefaultCommitExecutor thisObj = new DefaultCommitExecutor();

    // Act
    final String actual = thisObj.getErrorMessage();

    // Assert result
    Assert.assertEquals("commit", actual);

  }

//failed_pass   // Test written by Diffblue Cover
//  @Test
//  public void getLoggerOutputNotNull999c2928adabd5213ff() throws InvocationTargetException {
//
//    // Arrange
//    final DefaultCommitExecutor thisObj = new DefaultCommitExecutor();
//
//    // Act
//    final Logger actual = thisObj.getLogger();
//
//    // Assert result
//    Assert.assertNotNull(actual);
//    Assert.assertNotNull(actual.getLoggerRepository());
//    Assert.assertNull(((Hierarchy) actual.getLoggerRepository()).getRootLogger());
//    Assert.assertNotNull(((Hierarchy) actual.getLoggerRepository()).getRendererMap());
//    final Hashtable hashtable = new Hashtable();
//    Assert.assertEquals(hashtable, Reflector.getInstanceField(((Hierarchy) actual.getLoggerRepository()).getRendererMap(), "map"));
//    Assert.assertTrue((Boolean) Reflector.getInstanceField(actual.getLoggerRepository(), "emittedNoAppenderWarning"));
//    Assert.assertFalse((Boolean) Reflector.getInstanceField(actual.getLoggerRepository(), "emittedNoResourceBundleWarning"));
//    Assert.assertNotNull(((Hierarchy) actual.getLoggerRepository()).getThreshold());
//    Assert.assertNotNull(Reflector.getInstanceField(actual.getLoggerRepository(), "ht"));
//    Assert.assertEquals(55, ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).size());
//    final Object categoryKey = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey, "hashCache", 2122575784);
//    Reflector.setField(categoryKey, "name", "com.alibaba.cobar.net.NIOAcceptor");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey));
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey)).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey), "aai"));
//    Assert.assertEquals("com.alibaba.cobar.net.NIOAcceptor", ((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey)).getName());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey)).getPriority());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey)).getParent());
//    Assert.assertTrue(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey)).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey), "resourceBundle"));
//    final Object categoryKey1 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey1, "hashCache", 411370611);
//    Reflector.setField(categoryKey1, "name", "com.alibaba.cobar.net.handler");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"));
//    Assert.assertEquals(1, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData")).length);
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.net.handler.FrontendAuthenticator", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0], "resourceBundle"));
//    Assert.assertEquals(1, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "size"));
//    final Object categoryKey2 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey2, "hashCache", 768663425);
//    Reflector.setField(categoryKey2, "name", "com.alibaba.cobar.server.response.CharacterSet");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2));
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2)).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2), "aai"));
//    Assert.assertEquals("com.alibaba.cobar.server.response.CharacterSet", ((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2)).getName());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2)).getPriority());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2)).getParent());
//    Assert.assertTrue(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2)).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2), "resourceBundle"));
//    final Object categoryKey3 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey3, "hashCache", -321010424);
//    Reflector.setField(categoryKey3, "name", "com.alibaba.cobar.mysql.bio.executor.DefaultCommitExecutor");
//    Assert.assertNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey3));
//    final Object categoryKey4 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey4, "hashCache", 514906357);
//    Reflector.setField(categoryKey4, "name", "com.alibaba.cobar.heartbeat.CobarDetector");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4));
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4)).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4), "aai"));
//    Assert.assertEquals("com.alibaba.cobar.heartbeat.CobarDetector", ((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4)).getName());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4)).getPriority());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4)).getParent());
//    Assert.assertTrue(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4)).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4), "resourceBundle"));
//    final Object categoryKey5 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey5, "hashCache", -690974153);
//    Reflector.setField(categoryKey5, "name", "com.alibaba.cobar.mysql.nio.handler.RollbackReleaseHandler");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5));
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5)).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5), "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.nio.handler.RollbackReleaseHandler", ((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5)).getName());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5)).getPriority());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5)).getParent());
//    Assert.assertTrue(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5)).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5), "resourceBundle"));
//    final Object categoryKey6 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey6, "hashCache", 1476945414);
//    Reflector.setField(categoryKey6, "name", "com.alibaba.cobar.server.response");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey6));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey6), "elementData"));
//    Assert.assertEquals(1, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey6), "elementData")).length);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey6), "elementData"))[0]);
//    Assert.assertEquals(1, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey6), "size"));
//    final Object categoryKey7 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey7, "hashCache", 98689);
//    Reflector.setField(categoryKey7, "name", "com");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"));
//    Assert.assertEquals(35, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData")).length);
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.heartbeat.MySQLDetector", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.MySQLDataNode", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.server.session.NonBlockingSession", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.net.FrontendConnection", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.server.ServerConnection", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.net.NIOReactor", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5], "resourceBundle"));
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[6]);
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.nio.handler.CommitNodeHandler", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.nio.handler.MultiNodeQueryHandler", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.nio.MySQLConnection", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.route.ServerRouter", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.server.session.BlockingSession", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.bio.executor.SingleNodeExecutor", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.bio.executor.MultiNodeExecutor", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13], "resourceBundle"));
//    Assert.assertNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[14]);
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.bio.executor.RollbackExecutor", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.MySQLDataSource", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.heartbeat.MySQLHeartbeat", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.manager.response.KillConnection", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.manager.ManagerConnection", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.nio.handler.RollbackNodeHandler", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20], "resourceBundle"));
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[21]);
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.CobarNode", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.heartbeat.CobarHeartbeat", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.manager.response.RollbackConfig", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.bio.MySQLChannel", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.net.NIOConnector", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26], "resourceBundle"));
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[27]);
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.nio.handler.KillConnectionHandler", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28], "resourceBundle"));
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[29]);
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.manager.ManagerQueryHandler", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.server.ServerQueryHandler", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31], "resourceBundle"));
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[32]);
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.manager.response.ReloadConfig", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33], "resourceBundle"));
//    Assert.assertNotNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34]);
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34]).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34], "aai"));
//    Assert.assertEquals("com.alibaba.cobar.server.handler.ExplainHandler", ((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34]).getName());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34]).getPriority());
//    Assert.assertNull(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34]).getParent());
//    Assert.assertTrue(((Logger) ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34]).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34], "resourceBundle"));
//    Assert.assertEquals(35, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "size"));
//    final Object categoryKey8 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey8, "hashCache", 1638853058);
//    Reflector.setField(categoryKey8, "name", "com.alibaba.cobar.mysql.nio");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8), "elementData"));
//    Assert.assertEquals(6, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8), "elementData"))[3]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8), "elementData"))[4]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8), "elementData"))[5]);
//    Assert.assertEquals(6, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey8), "size"));
//    final Object categoryKey9 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey9, "hashCache", 1209312552);
//    Reflector.setField(categoryKey9, "name", "com.alibaba.cobar.manager.response");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey9));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey9), "elementData"));
//    Assert.assertEquals(3, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey9), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey9), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey9), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey9), "elementData"))[2]);
//    Assert.assertEquals(3, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey9), "size"));
//    final Object categoryKey10 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey10, "hashCache", -1765383407);
//    Reflector.setField(categoryKey10, "name", "com.alibaba.cobar.server.session.NonBlockingSession");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey10));
//    final Object categoryKey11 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey11, "hashCache", -924905868);
//    Reflector.setField(categoryKey11, "name", "com.alibaba.cobar.mysql.nio.handler.RollbackNodeHandler");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey11));
//    final Object categoryKey12 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey12, "hashCache", 317060675);
//    Reflector.setField(categoryKey12, "name", "com.alibaba.cobar.route");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey12));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey12), "elementData"));
//    Assert.assertEquals(1, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey12), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey12), "elementData"))[0]);
//    Assert.assertEquals(1, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey12), "size"));
//    final Object categoryKey13 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey13, "hashCache", 92895825);
//    Reflector.setField(categoryKey13, "name", "alarm");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey13));
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey13)).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey13), "aai"));
//    Assert.assertEquals("alarm", ((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey13)).getName());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey13)).getPriority());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey13)).getParent());
//    Assert.assertTrue(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey13)).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey13), "resourceBundle"));
//    final Object categoryKey14 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey14, "hashCache", 200896764);
//    Reflector.setField(categoryKey14, "name", "heartbeat");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey14));
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey14)).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey14), "aai"));
//    Assert.assertEquals("heartbeat", ((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey14)).getName());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey14)).getPriority());
//    Assert.assertNull(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey14)).getParent());
//    Assert.assertTrue(((Logger) ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey14)).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey14), "resourceBundle"));
//    final Object categoryKey15 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey15, "hashCache", 2080864493);
//    Reflector.setField(categoryKey15, "name", "com.alibaba.cobar.mysql.nio.handler.MultiNodeQueryHandler");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey15));
//    final Object categoryKey16 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey16, "hashCache", 1258252937);
//    Reflector.setField(categoryKey16, "name", "com.alibaba.cobar.server");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16), "elementData"));
//    Assert.assertEquals(6, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16), "elementData"))[3]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16), "elementData"))[4]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16), "elementData"))[5]);
//    Assert.assertEquals(6, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey16), "size"));
//    final Object categoryKey17 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey17, "hashCache", -864635783);
//    Reflector.setField(categoryKey17, "name", "com.alibaba.cobar.mysql.bio.MySQLChannel");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey17));
//    final Object categoryKey18 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey18, "hashCache", -797754073);
//    Reflector.setField(categoryKey18, "name", "com.alibaba.cobar.manager");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey18));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey18), "elementData"));
//    Assert.assertEquals(5, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey18), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey18), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey18), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey18), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey18), "elementData"))[3]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey18), "elementData"))[4]);
//    Assert.assertEquals(5, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey18), "size"));
//    final Object categoryKey19 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey19, "hashCache", 2098411844);
//    Reflector.setField(categoryKey19, "name", "com.alibaba.cobar.manager.ManagerConnection");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey19));
//    final Object categoryKey20 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey20, "hashCache", 1533877003);
//    Reflector.setField(categoryKey20, "name", "com.alibaba.cobar.mysql.bio.executor");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey20));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey20), "elementData"));
//    Assert.assertEquals(4, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey20), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey20), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey20), "elementData"))[1]);
//    Assert.assertNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey20), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey20), "elementData"))[3]);
//    Assert.assertEquals(4, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey20), "size"));
//    final Object categoryKey21 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey21, "hashCache", -1834213196);
//    Reflector.setField(categoryKey21, "name", "com.alibaba.cobar.mysql.nio.MySQLConnection");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey21));
//    final Object categoryKey22 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey22, "hashCache", -1410590052);
//    Reflector.setField(categoryKey22, "name", "com.alibaba.cobar.server.handler.ExplainHandler");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey22));
//    final Object categoryKey23 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey23, "hashCache", 94540646);
//    Reflector.setField(categoryKey23, "name", "com.alibaba.cobar.server.ServerConnection");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey23));
//    final Object categoryKey24 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey24, "hashCache", 1635030435);
//    Reflector.setField(categoryKey24, "name", "com.alibaba.cobar.CobarNode");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey24));
//    final Object categoryKey25 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey25, "hashCache", -1990589474);
//    Reflector.setField(categoryKey25, "name", "com.alibaba.cobar.mysql.nio.handler.KillConnectionHandler");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey25));
//    final Object categoryKey26 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey26, "hashCache", 619193621);
//    Reflector.setField(categoryKey26, "name", "com.alibaba.cobar.mysql.MySQLDataSource");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey26));
//    final Object categoryKey27 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey27, "hashCache", -1130788272);
//    Reflector.setField(categoryKey27, "name", "com.alibaba.cobar.heartbeat.MySQLDetector");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey27));
//    final Object categoryKey28 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey28, "hashCache", -1349761471);
//    Reflector.setField(categoryKey28, "name", "com.alibaba.cobar.mysql.nio.handler.CommitNodeHandler");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey28));
//    final Object categoryKey29 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey29, "hashCache", 181755002);
//    Reflector.setField(categoryKey29, "name", "com.alibaba.cobar.mysql.bio.executor.RollbackExecutor");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey29));
//    final Object categoryKey30 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey30, "hashCache", 456094859);
//    Reflector.setField(categoryKey30, "name", "com.alibaba.cobar.mysql.bio.executor.MultiNodeExecutor");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey30));
//    final Object categoryKey31 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey31, "hashCache", -1847681464);
//    Reflector.setField(categoryKey31, "name", "com.alibaba.cobar.manager.ManagerQueryHandler");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey31));
//    final Object categoryKey32 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey32, "hashCache", 1580991848);
//    Reflector.setField(categoryKey32, "name", "com.alibaba.cobar");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"));
//    Assert.assertEquals(35, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[3]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[4]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[5]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[6]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[7]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[8]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[9]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[10]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[11]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[12]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[13]);
//    Assert.assertNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[14]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[15]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[16]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[17]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[18]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[19]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[20]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[21]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[22]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[23]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[24]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[25]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[26]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[27]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[28]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[29]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[30]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[31]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[32]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[33]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "elementData"))[34]);
//    Assert.assertEquals(35, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey32), "size"));
//    final Object categoryKey33 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey33, "hashCache", 872413162);
//    Reflector.setField(categoryKey33, "name", "com.alibaba.cobar.server.ServerQueryHandler");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey33));
//    final Object categoryKey34 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey34, "hashCache", 1638841526);
//    Reflector.setField(categoryKey34, "name", "com.alibaba.cobar.mysql.bio");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey34));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey34), "elementData"));
//    Assert.assertEquals(5, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey34), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey34), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey34), "elementData"))[1]);
//    Assert.assertNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey34), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey34), "elementData"))[3]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey34), "elementData"))[4]);
//    Assert.assertEquals(5, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey34), "size"));
//    final Object categoryKey35 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey35, "hashCache", 358612975);
//    Reflector.setField(categoryKey35, "name", "com.alibaba");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"));
//    Assert.assertEquals(35, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[3]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[4], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[4]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[5]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[6]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[7]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[8]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[9]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[10]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[11]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[12]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[13]);
//    Assert.assertNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[14]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[15]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[16]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[17]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[18]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[19], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[19]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[20]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[21]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[22], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[22]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[23]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[24]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[25]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[26]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[27]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[28]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[29]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[30], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[30]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[31], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[31]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey2), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[32]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[33]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "elementData"))[34]);
//    Assert.assertEquals(35, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey35), "size"));
//    final Object categoryKey36 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey36, "hashCache", 1582708965);
//    Reflector.setField(categoryKey36, "name", "com.alibaba.cobar.server.handler");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey36));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey36), "elementData"));
//    Assert.assertEquals(1, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey36), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[34], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey36), "elementData"))[0]);
//    Assert.assertEquals(1, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey36), "size"));
//    final Object categoryKey37 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey37, "hashCache", 846976429);
//    Reflector.setField(categoryKey37, "name", "com.alibaba.cobar.heartbeat.CobarHeartbeat");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey37));
//    final Object categoryKey38 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey38, "hashCache", -1420073935);
//    Reflector.setField(categoryKey38, "name", "com.alibaba.cobar.server.session");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey38));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey38), "elementData"));
//    Assert.assertEquals(2, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey38), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[2], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey38), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey38), "elementData"))[1]);
//    Assert.assertEquals(2, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey38), "size"));
//    final Object categoryKey39 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey39, "hashCache", -1462884362);
//    Reflector.setField(categoryKey39, "name", "com.alibaba.cobar.heartbeat");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey39));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey39), "elementData"));
//    Assert.assertEquals(4, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey39), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[0], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey39), "elementData"))[0]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey4), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey39), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey39), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[23], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey39), "elementData"))[3]);
//    Assert.assertEquals(4, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey39), "size"));
//    final Object categoryKey40 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey40, "hashCache", -1637147328);
//    Reflector.setField(categoryKey40, "name", "com.alibaba.cobar.mysql.bio.executor.SingleNodeExecutor");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey40));
//    final Object categoryKey41 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey41, "hashCache", 925563174);
//    Reflector.setField(categoryKey41, "name", "com.alibaba.cobar.net.handler.FrontendAuthenticator");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey41));
//    final Object categoryKey42 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey42, "hashCache", -1639901855);
//    Reflector.setField(categoryKey42, "name", "com.alibaba.cobar.manager.response.ReloadConfig");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[33], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey42));
//    final Object categoryKey43 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey43, "hashCache", 333276647);
//    Reflector.setField(categoryKey43, "name", "com.alibaba.cobar.net.FrontendConnection");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey43));
//    final Object categoryKey44 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey44, "hashCache", -1142227732);
//    Reflector.setField(categoryKey44, "name", "com.alibaba.cobar.manager.response.RollbackConfig");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[24], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey44));
//    final Object categoryKey45 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey45, "hashCache", -849362302);
//    Reflector.setField(categoryKey45, "name", "com.alibaba.cobar.manager.response.KillConnection");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[18], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey45));
//    final Object categoryKey46 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey46, "hashCache", 746693655);
//    Reflector.setField(categoryKey46, "name", "com.alibaba.cobar.net");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey46));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey46), "elementData"));
//    Assert.assertEquals(5, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey46), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[3], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey46), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey46), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey1), "elementData"))[0], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey46), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey46), "elementData"))[3]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey46), "elementData"))[4]);
//    Assert.assertEquals(5, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey46), "size"));
//    final Object categoryKey47 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey47, "hashCache", -1984827196);
//    Reflector.setField(categoryKey47, "name", "com.alibaba.cobar.server.session.BlockingSession");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[11], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey47));
//    final Object categoryKey48 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey48, "hashCache", 312738972);
//    Reflector.setField(categoryKey48, "name", "com.alibaba.cobar.mysql");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"));
//    Assert.assertEquals(13, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[2]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[9], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[3]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[12], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[4]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[13], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[5]);
//    Assert.assertNull(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[6]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[15], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[7]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[16], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[8]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[9]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[25], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[10]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[11]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "elementData"))[12]);
//    Assert.assertEquals(13, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey48), "size"));
//    final Object categoryKey49 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey49, "hashCache", -848666244);
//    Reflector.setField(categoryKey49, "name", "com.alibaba.cobar.mysql.MySQLDataNode");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[1], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey49));
//    final Object categoryKey50 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey50, "hashCache", 457245271);
//    Reflector.setField(categoryKey50, "name", "com.alibaba.cobar.route.ServerRouter");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[10], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey50));
//    final Object categoryKey51 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey51, "hashCache", 1356654917);
//    Reflector.setField(categoryKey51, "name", "com.alibaba.cobar.net.NIOReactor");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[5], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey51));
//    final Object categoryKey52 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey52, "hashCache", -1381073616);
//    Reflector.setField(categoryKey52, "name", "com.alibaba.cobar.net.NIOConnector");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[26], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey52));
//    final Object categoryKey53 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey53, "hashCache", 1370050482);
//    Reflector.setField(categoryKey53, "name", "com.alibaba.cobar.heartbeat.MySQLHeartbeat");
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[17], ((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey53));
//    final Object categoryKey54 = Reflector.getInstance("org.apache.log4j.CategoryKey");
//    Reflector.setField(categoryKey54, "hashCache", 1280536350);
//    Reflector.setField(categoryKey54, "name", "com.alibaba.cobar.mysql.nio.handler");
//    Assert.assertNotNull(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey54));
//    Assert.assertNotNull(Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey54), "elementData"));
//    Assert.assertEquals(5, ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey54), "elementData")).length);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[7], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey54), "elementData"))[0]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[8], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey54), "elementData"))[1]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[20], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey54), "elementData"))[2]);
//    Assert.assertEquals(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey5), ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey54), "elementData"))[3]);
//    Assert.assertEquals(((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey7), "elementData"))[28], ((Object[]) Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey54), "elementData"))[4]);
//    Assert.assertEquals(5, Reflector.getInstanceField(((java.util.Map) Reflector.getInstanceField(actual.getLoggerRepository(), "ht")).get(categoryKey54), "size"));
//    Assert.assertEquals(-2147483648, Reflector.getInstanceField(actual.getLoggerRepository(), "thresholdInt"));
//    Assert.assertNull(((Hierarchy) actual.getLoggerRepository()).getThrowableRenderer());
//    Assert.assertNull(Reflector.getInstanceField(actual, "aai"));
//    Assert.assertEquals("com.alibaba.cobar.mysql.bio.executor.DefaultCommitExecutor", actual.getName());
//    Assert.assertNull(actual.getPriority());
//    Assert.assertNotNull(actual.getParent());
//    Assert.assertEquals(actual.getLoggerRepository(), ((RootLogger) actual.getParent()).getLoggerRepository());
//    Assert.assertNull(Reflector.getInstanceField(actual.getParent(), "aai"));
//    Assert.assertEquals("root", ((RootLogger) actual.getParent()).getName());
//    Assert.assertNotNull(((RootLogger) actual.getParent()).getPriority());
//    Assert.assertNull(((RootLogger) actual.getParent()).getParent());
//    Assert.assertTrue(((RootLogger) actual.getParent()).getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(actual.getParent(), "resourceBundle"));
//    Assert.assertTrue(actual.getAdditivity());
//    Assert.assertNull(Reflector.getInstanceField(actual, "resourceBundle"));
//
//  }

  // Test written by Diffblue Cover
  @Test
  public void terminateOutputVoid999d3afc32dea58e51a() throws InterruptedException {

    // Arrange
    final DefaultCommitExecutor thisObj = new DefaultCommitExecutor();

    // Act
    thisObj.terminate();

    // The method returns void, testing that no exception is thrown

  }
}
