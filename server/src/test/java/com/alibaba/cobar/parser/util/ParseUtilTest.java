/*
 * Copyright 2018 Diffblue Limited
 *  
 * Diffblue Limited licenses this file to You under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.alibaba.cobar.parser.util;

import com.alibaba.cobar.parser.util.ParseUtil;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class ParseUtilTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: ParseUtil */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 178 branch to line 178
   *  - case 2 of switch on line 178
   *  - conditional line 180 branch to line 180
   *  - conditional line 180 branch to line 197
   */

  @Test
  public void commentInputNotNullPositiveOutputPositive() {

    // Arrange
    final String stmt = "/////+";
    final int offset = 4;

    // Act
    final int retval = ParseUtil.comment(stmt, offset);

    // Assert result
    Assert.assertEquals(4, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 178 branch to line 178
   *  - case 2 of switch on line 178
   *  - conditional line 180 branch to line 180
   *  - conditional line 180 branch to line 197
   */

  @Test
  public void commentInputNotNullZeroOutputZero() {

    // Arrange
    final String stmt = "/*n";
    final int offset = 0;

    // Act
    final int retval = ParseUtil.comment(stmt, offset);

    // Assert result
    Assert.assertEquals(0, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 321 branch to line 329
   */

  @Test
  public void compareInputNotNullPositive0OutputFalse() {

    // Arrange
    final String s = "";
    final int offset = 1;
    final char[] keyword = {};

    // Act
    final boolean retval = ParseUtil.compare(s, offset, keyword);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 201 branch to line 202
   *  - conditional line 202 branch to line 202
   */

  @Test
  public void currentCharIsSepInputNotNullNegativeOutputStringIndexOutOfBoundsException() {

    // Arrange
    final String stmt = "";
    final int offset = -2147483648;

    // Act
    thrown.expect(StringIndexOutOfBoundsException.class);
    ParseUtil.currentCharIsSep(stmt, offset);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 201 branch to line 202
   *  - conditional line 202 branch to line 202
   *  - case 4 of switch on line 202
   */

  @Test
  public void currentCharIsSepInputNotNullPositiveOutputTrue() {

    // Arrange
    final String stmt = "       ";
    final int offset = 2;

    // Act
    final boolean retval = ParseUtil.currentCharIsSep(stmt, offset);

    // Assert result
    Assert.assertEquals(true, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 201 branch to line 202
   *  - conditional line 202 branch to line 202
   */

  @Test
  public void currentCharIsSepInputNotNullZeroOutputFalse() {

    // Arrange
    final String stmt = "!";
    final int offset = 0;

    // Act
    final boolean retval = ParseUtil.currentCharIsSep(stmt, offset);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 201 branch to line 212
   */

  @Test
  public void currentCharIsSepInputNotNullZeroOutputTrue() {

    // Arrange
    final String stmt = "";
    final int offset = 0;

    // Act
    final boolean retval = ParseUtil.currentCharIsSep(stmt, offset);

    // Assert result
    Assert.assertEquals(true, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 29 branch to line 29
   *  - conditional line 29 branch to line 30
   *  - conditional line 30 branch to line 30
   */

  @Test
  public void getSQLIdInputNotNullOutputPositive() {

    // Arrange
    final String stmt = "}=8";

    // Act
    final long retval = ParseUtil.getSQLId(stmt);

    // Assert result
    Assert.assertEquals(8L, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 29 branch to line 36
   */

  @Test
  public void getSQLIdInputNotNullOutputZero() {

    // Arrange
    final String stmt = "8";

    // Act
    final long retval = ParseUtil.getSQLId(stmt);

    // Assert result
    Assert.assertEquals(0L, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 219 branch to line 219
   */

  @Test
  public void nextCharIsSepInputNotNullPositiveOutputTrue() {

    // Arrange
    final String stmt = "";
    final int offset = 7;

    // Act
    final boolean retval = ParseUtil.nextCharIsSep(stmt, offset);

    // Assert result
    Assert.assertEquals(true, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.This test covers `int
   * nextStringIsExpectedWithIgnoreSepChar(String, String)' block 1 (line 233)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 3 (line 233)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 4 (line 233)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 5 (line 235)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 7 (line 235)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 8 (line 236)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 9 (line 240)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 10 (line 240)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 12 (line 240)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 13 (line 240)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 14 (line 241)
   * This test covers `int nextStringIsExpectedWithIgnoreSepChar(String,
   * String)' block 15 (line 242)
   *
   */

  @Test
  public void
  nextStringIsExpectedWithIgnoreSepCharInputNotNullNegativeNotNullFalseOutputStringIndexOutOfBoundsException() {

    // Arrange
    final String stmt = "!!!!!!";
    final int offset = -12;
    final String nextExpectedString = "0";
    final boolean checkSepChar = false;

    // Act
    thrown.expect(StringIndexOutOfBoundsException.class);
    ParseUtil.nextStringIsExpectedWithIgnoreSepChar(stmt, offset, nextExpectedString, checkSepChar);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 233 branch to line 233
   *  - conditional line 233 branch to line 235
   *
   *  - conditional line 253 branch to line 261
   */

  @Test
  public void
  nextStringIsExpectedWithIgnoreSepCharInputNotNullPositiveNotNullFalseOutputPositive() {

    // Arrange
    final String stmt = "!!!!!!!!";
    final int offset = 9;
    final String nextExpectedString = "0";
    final boolean checkSepChar = false;

    // Act
    final int retval = ParseUtil.nextStringIsExpectedWithIgnoreSepChar(
        stmt, offset, nextExpectedString, checkSepChar);

    // Assert result
    Assert.assertEquals(9, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 233 branch to line 233
   *  - conditional line 233 branch to line 234
   */

  @Test
  public void nextStringIsExpectedWithIgnoreSepCharInputNotNullPositiveNotNullTrueOutputPositive() {

    // Arrange
    final String stmt = "!!!!!!!!";
    final int offset = 9;
    final String nextExpectedString = "";
    final boolean checkSepChar = true;

    // Act
    final int retval = ParseUtil.nextStringIsExpectedWithIgnoreSepChar(
        stmt, offset, nextExpectedString, checkSepChar);

    // Assert result
    Assert.assertEquals(9, retval);
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 281 branch to line 281
   */

  @Test
  public void nextStringIsJsonEqInputNotNullNegativeOutputStringIndexOutOfBoundsException() {

    // Arrange
    final String stmt = "?";
    final int offset = -687865843;

    // Act
    thrown.expect(StringIndexOutOfBoundsException.class);
    ParseUtil.nextStringIsJsonEq(stmt, offset);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 281 branch to line 281
   *  - conditional line 281 branch to line 282
   */

  @Test
  public void nextStringIsJsonEqInputNotNullPositiveOutputPositive() {

    // Arrange
    final String stmt = "jjjjjjjjj";
    final int offset = 7;

    // Act
    final int retval = ParseUtil.nextStringIsJsonEq(stmt, offset);

    // Assert result
    Assert.assertEquals(7, retval);
  }
}
